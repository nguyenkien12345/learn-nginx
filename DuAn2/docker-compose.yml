services:
  # Đặt tên service là nginx
  nginx:
    # Đặt tên container là my-nginx
    container_name: my-nginx
    depends_on:
      #  service nginx sẽ phụ thuộc vào container backend.
      #  service nginx sẽ không bao giờ bắt đầu cho đến khi container backend đã bắt đầu và sẵn sàng
      - backend
    restart: unless-stopped
    build:
      # Nó sẽ đứng ngay root của toàn bộ dự án (Cùng cấp với folder nginx, stackBE, stackeFE) (Khi ta build chung cục frontend ngay trong con nginx)
      context: .
      # Tìm file Dockerfile trong folder nginx để thực hiện quá trình build cục service này
      dockerfile: ./nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Ghi đè file nginx.conf trong folder nginx/config của dự án lên file nginx.conf của folder etc/nginx trong docker
      - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf
      # Nó sẽ lấy tất cả nội dung trong thư mục build của cục stackFE và ghi đè lại thư mục html của thằng nginx trong usr/share/nginx/html/
      # - ../stackFE/build/:/usr/share/nginx/html/ 
      # (Chỉ chạy dòng này khi ta build con frontend độc lập, còn nếu build con frontend trong con nginx thì không cần dòng này)
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # Cứ sau 1 tháng thì con nginx của chúng ta sẽ tự động restart lại
    command: "/bin/sh -c 'while :; do sleep 720h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Đặt tên service là mysqldb
  mysqldb:
    # Docker pull image mysql:5.7 
    image: mysql:5.7
    restart: unless-stopped
    # Đặt tên container là my-db
    container_name: my-db
    # Thực thi các câu lệnh trong tệp init.sql khi start container
    command: --init-file /data/application/init.sql
    volumes:
      # Ghi đè file initDB.sql lên file initDB.sql của folder /data/application
      - ./initDB.sql:/data/application/init.sql
    environment:
      - MYSQL_ROOT_PASSWORD=123456789
      - MYSQL_DATABSE=stack_overflow
    # Con service backend khai báo bên dưới sẽ kết nối vào con service mysqldb này thông qua cổng 3306 
    # 3306 chính là cổng giao tiếp giữa 2 con service mysqldb và backend để chúng có thể nói chuyện với nhau
    # Các service khác khi muốn giao tiếp với con service mysqldb thì chỉ cần khai báo trong file env cổng 3306 này là được
    expose:
      - "3306"

  # Đặt tên service là backend
  backend:
    depends_on:
      #  service backend sẽ phụ thuộc vào container mysqldb.
      #  service backend sẽ không bao giờ bắt đầu cho đến khi container mysqldb đã bắt đầu và sẵn sàng
      - mysqldb
    restart: unless-stopped
    # Đặt tên container là my-backend
    container_name: my-backend
    build:
      # Nó sẽ tìm file Dockerfile trong folder stackBE để build cục service này
      context: ./stackBE
    environment: 
      # Tham số môi trường của thằng docker nó sẽ ghi đè tham số môi trường của ứng dụng của chúng ta
      # Ghi đề lại biến HOST trong file .env của cục stackBE. Lúc này biến HOST trong file .env của cục stackBE sẽ mang giá trị là mysqldb
      - HOST=mysqldb
    links: 
      # container backend sẽ được liên kết với container mysqld. container backend có thể truy cập các dịch vụ được cung cấp bởi container
      # mysqld 
      - mysqldb
    expose: 
      # Lúc này con nginx muốn giao tiếp với con backend thì trong file nginx.conf phải gọi tới port này
      - "8000"

  # Đặt tên service là certbot
  certbot:
    container_name: my-certbot
    image: certbot/dns-nsone:v1.18.0
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # Cứ 12 giờ cái con certbot của chúng ta nó sẽ tự động  restart lại và sau khi restart lại nó sẽ chạy câu lệnh certbot renew cứ sau 12 giờ
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

# Lưu ý:
# Chúng ta thấy ở cả 2 con service nginx và certbot đều có volumes giống nhau: 
# - ./certbot/conf:/etc/letsencrypt
# - ./certbot/www:/var/www/certbot
# - Việc chúng ta tạo ra certificate thông qua con certbot thì nó sẽ lưu ở trong các thư mục sau: etc/letsencrypt và var/www/certbot của con certbot
# Chúng ta sẽ (mount ngược) mapping ngược vào trong  ./certbot/conf và ./certbot/www của con nginx. Nghĩa là cái đầu ra của cái việc tạo chứng chỉ của con
# certbot sẽ là cái đầu vào của con nginx. Con nginx sẽ đọc được chứng chỉ thông qua volumes

# Các bước thực hiện:
# B1) Mở Git Bash Here
# B2) Gõ sh init-letsencrypt.sh
# B3) Lúc này ta sẽ vào trong certbot/conf/live/hoidanitexample.xyz. Nó sẽ có 2 file fullchain.pem và private.pem (Đây chính là cặp SSL của chúng ta)
# (hoidanitexample.xyz chính là tên miền của chúng ta). 
