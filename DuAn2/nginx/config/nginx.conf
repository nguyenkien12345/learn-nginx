# Lưu ý luôn luôn kết thúc cuối câu với dấu ; 
# Đoạn từ dòng 2 đến dòng 11 thường dùng để định nghĩa cái thằng nginx xử lý công việc load balancing
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;   
}

# http: Định nghĩa 1 cái web server (http,https là hình thức giao tiếp)
http { 
    # Mime types: Nó sẽ giúp cho máy tính của chúng ta hiểu được là chúng ta đang truy cập file với cái kiểu dữ liệu là như thế nào
    # /etc/nginx/mime.types: Nơi định nghĩa tất cả các định dạng file mime.types thường gặp
    include       /etc/nginx/mime.types;

    server {
        # Luôn luôn (bắt buộc) sử dụng địa chỉ ip bởi vì mỗi 1 địa chỉ ip nó sẽ xác định 1 cái server duy nhất mà thôi
        # Máy tính không hiểu tên miền mà phải thông qua 1 cái dns để mapping domain với ip
        # listen: Chạy con webserver ở port 80
        listen      80;
        listen [::]:80;

        server_name nguyentrungkien08112000.click;
        server_tokens off;

        # Nếu gặp lỗi 404 thì ta sẽ chạy vào location   /404.html để đi tìm file 404.html và hiển thị ra {}
        # error_page  404         /404.html;
        # location /404.html {
        #     root /usr/share/nginx/html;
        # }

        # Con Let's encrypt mới xác định được chúng ta là người chủ sở hữu của tên miền
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Mỗi lần chúng ta vào http (ứng với cổng 80) nó sẽ tự động redirect chuyển hướng chúng ta sang cổng 443 (Nghĩa là từ việc chúng 
        # ta chạy tên miền với http thì nó sẽ tự động chuyển hướng sang https)
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # upstream giúp chúng ta giải quyết các bài toán liên quan đến load balancer
    # backend-stackoverflow là ta tự đặt tên
    upstream backend-stackoverflow {
        # Nó sẽ gọi đến con service backend (con service backend này expose cổng 8000) trong file docker-compose.yml
        server backend:8000;
    }

    server {
        listen 443 ssl;
        server_name nguyentrungkien08112000.click;
        server_tokens off;

        # ssl_certificate /etc/letsencrypt/live/nguyentrungkien08112000.click/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/nguyentrungkien08112000.click/privkey.pem;
        # Đây chính là 2 file tạo ra chứng chỉ SSL cho chúng ta. Con nginx sẽ đọc 2 đường dẫn này sau đó sinh ra certificate
        ssl_certificate /etc/letsencrypt/live/nguyentrungkien08112000.click/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/nguyentrungkien08112000.click/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # Tùy với mỗi 1 đường link tương ứng mà ta sẽ cần chỉ cho nginx biết là đọc tài liệu từ đâu, đọc cái gì
        # Setup route cho fontend
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            # Cứ khác đường dẫn / (vd: /home, /about, /contact, ... thì chúng ta sẽ gọi vào thằng react coi nó có xử lý được những cái request có route như thế không ?)
            try_files $uri /index.html;
        }

        # Setup route cho backend (route cứ bắt đầu bằng api là chạy vào đây xử lý)
        location /api {
            # nginx sẽ gọi đến http://localhost:8000 (forward) sau đó trả về phản hồi (Giấu đi đường link backend thật sự)
            # Ở đây ta phải thay http://localhost:8000 thành http://host.docker.internal:8000 vì nếu để là localhost nó sẽ không thể
            # gọi được đến database bên ngoài máy tính local của chúng ta nên ta phải thay localhost thành host.docker.internal thì mới
            # có thể gọi đến database local của chúng ta được
            # proxy_pass http://host.docker.internal:8000;

            # Gọi đến upstream backend-stackoverflow có protocol là http
            proxy_pass http://backend-stackoverflow;

            # Setup lấy các thông tin của phía client gửi lên server
            # Vì con nginx đã fake địa chỉ ip của chúng ta rồi. Nên để lấy các thông tin của khách hàng chúng ta bắt buộc phải sử
            # dụng con backend (Vì nó qua con nginx xong sẽ đến con backend)
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_set_header X-NginX-Proxy true;
        }
    }
}

# Thường con nginx của chúng ta nó chỉ biết mỗi cái đường dẫn / mà thôi. Nên lúc nào chúng ta cũng phải qua con nginx trước rồi
# mới đến con react. Khi mà chạy vào cái đường dẫn / này xong thì lúc này các đường
# dẫn như /home, /about, /contact, ... sẽ do react handle điều hướng xử lý. Chúng ta đang gặp khó khăn ở chỗ là mỗi lần chúng ta
# f5 reload lại trang web thì thì lúc này browser của chúng ta sẽ đi hỏi con nginx là ứng với đường link này (vd: /home, /about, /contact)
# nó phải làm gì. Anh nginx của chúng ta mới đi đọc trong location của nó thì không thấy có đường dẫn/location nào tương ứng cả thế
# là trả ra 404 luôn mà không hề nói cho thằng react biết là có 1 cái request gửi tới.
# Chúng ta phải qua được nginx thì mới đến được react
